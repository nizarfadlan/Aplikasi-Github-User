name: Android

on:
  push:
    branches:
      - release/*
  workflow_dispatch:

permissions:
  contents: write

env:
  JAVA_VERSION: '17'
  JAVA_DIST: 'zulu'
  BUILD_TOOLS_VERSION: '34.0.0'
  API_KEY: ${{ secrets.API_KEY }}
  GRADLE_CACHE_PATHS: |
    ~/.gradle/caches
    ~/.gradle/wrapper

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.get_version_name.outputs.version_name }}
      gradle_cache_key: ${{ steps.cache_gradle.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3
      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
          cache: 'gradle'
      - name: Cache Gradle
        id: cache_gradle
        uses: actions/cache@v3
        with:
          path: ${{ env.GRADLE_CACHE_PATHS }}
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Get Version Name
        id: get_version_name
        run: |
          VERSION_NAME=$(${{github.workspace}}/gradlew -q :app:printVersionName)
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ${{ env.GRADLE_CACHE_PATHS }}
          key: ${{ needs.setup.outputs.gradle_cache_key || runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
      - name: Set Up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
      - name: Run lint
        run: ./gradlew lintDebug
      - name: Upload lint report
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

  test:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ${{ env.GRADLE_CACHE_PATHS }}
          key: ${{ needs.setup.outputs.gradle_cache_key || runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
      - name: Set Up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
      - name: Run tests
        run: ./gradlew test
        env:
          API_KEY: ${{ env.API_KEY }}
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: app/build/test-results

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ${{ env.GRADLE_CACHE_PATHS }}
          key: ${{ needs.setup.outputs.gradle_cache_key || runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
      - name: Set Up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
      - name: Build APK and AAB
        run: |
          ./gradlew assembleDebug assembleRelease bundleRelease
        env:
          API_KEY: ${{ env.API_KEY }}
      - name: Upload Debug APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk
      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release-unsigned
          path: app/build/outputs/apk/release/app-release-unsigned.apk
      - name: Upload Release Bundle
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: app/build/outputs/bundle/release/app-release.aab

  sign-and-release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download Release APK
        uses: actions/download-artifact@v3
        with:
          name: app-release-unsigned
          path: app/build/outputs/apk/release
      - name: Download Release Bundle
        uses: actions/download-artifact@v3
        with:
          name: app-release
          path: app/build/outputs/bundle/release
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOLS_VERSION }}
      - name: Sign Bundle
        uses: r0adkll/sign-android-release@v1
        id: sign_bundle
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOLS_VERSION }}
      - name: Check if Release Exists
        id: check_release
        run: |
          if curl --head --fail --silent --location "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.setup.outputs.version_name }}"; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub Release
        if: steps.check_release.outputs.release_exists != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.version_name }}
          release_name: Release ${{ needs.setup.outputs.version_name }}
          draft: false
          prerelease: false
      - name: Upload Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_app.outputs.signedReleaseFile}}
          asset_name: app-release-${{ needs.setup.outputs.version_name }}.apk
          asset_content_type: application/vnd.android.package-archive
      - name: Upload Release Bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_bundle.outputs.signedReleaseFile}}
          asset_name: app-release-${{ needs.setup.outputs.version_name }}.aab
          asset_content_type: application/octet-stream